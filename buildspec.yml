version: 0.2

run-as: root
env:
#   shell: shell-tag
#   variables:
#     key: "value"
#     key: "value"
    parameter-store:
        AWS_ACCESS_KEY_ID_PARAM: /CodeBuild/AWS_ACCESS_KEY_ID
        AWS_SECRET_ACCESS_KEY_PARAM: /CodeBuild/AWS_SECRET_ACCESS_KEY

phases:
  install:
     run-as: root
#     on-failure: ABORT | CONTINUE
     runtime-versions:
      python: 3.x
#       runtime: version
    
     commands:
      - echo install phase   
      - pip install --upgrade pip
      - pip install awscli
      - aws --version
      - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_PARAM
      - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY_PARAM    
       
     finally:
       - echo install phase completed

  build:
     run-as: root
#     on-failure: ABORT | CONTINUE
     commands:
       - aws ec2 create-key-pair --key-name MyKeyPair1 --query 'KeyMaterial' --output text > MyKeyPair1.pem
       - chmod 400 MyKeyPair1.pem
       - SecurityGroupID=$(aws ec2 create-security-group --group-name mysecurity-grp-1 --description "security grp for ec2 instance" --vpc-id vpc-01eabbd2b4358ecc1 --query GroupId --output text)
       - aws ec2 authorize-security-group-ingress --group-id $SecurityGroupID --protocol tcp --port 80--cidr 0.0.0.0/0
       - aws ec2 authorize-security-group-ingress --group-id $SecurityGroupID --protocol tcp --port 22 --cidr 0.0.0.0/0
       - aws ec2 run-instances --image-id ami-07eaf2ea4b73a54f6 --count 1 --instance-type t2.micro --key-name MyKeyPair1 --subnet-id subnet-0ef9c7d5a86c49ffc  --security-group-ids $SecurityGroupID --user-data file://user-data.txt
